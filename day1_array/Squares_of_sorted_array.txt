Q>Given an integer array nums sorted in non-decreasing order, 
return an array of the squares of each number sorted in non-decreasing order.

Example 1:

Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].

Solution
=============
Time Complexity--O(n)

class Solution {
    public int[] sortedSquares(int[] nums) {
        int []ans=new int[nums.length];
        // for(int i=0;i<nums.length;i++){
        //     ans[i]=(nums[i]*nums[i]);
        // }
        // Arrays.sort(ans);
        // return ans;

        int i=0;
        int j=nums.length-1;
        int n=nums.length-1;
        while(i<=j){
            int a=nums[i]*nums[i];
            int b=nums[j]*nums[j];

            if(a>b){
                ans[n]=a;
                i++;
            }else {
                ans[n]=b;
                j--;
            }
            n--;
        }
        return ans;
    }
}