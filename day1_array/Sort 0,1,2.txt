Q>Given an array nums with n objects colored red, white, or blue, 
sort them in-place so that objects of the same color are adjacent, 
with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]



Solution
==============
Intuition: Dutch National Flag Algorithm
---------------------------------------------
-> Maintain three pointers low and mid at 0, high at end.
-> Iterate mid & whenever there is 0 put that to extream left by swapping it with low and increment low and mid.
-> Whenever there is 1 just let it be there and increment mid.
-> whenever there is 2 put that to extream right by swapping nums[mid] with nums[high].


Complexity
------------------
Time complexity:
O(n)

Space complexity:
O(1)

code
-------------

class Solution {
    private void swap(int nums[],int i,int j){
        int temp=nums[i];
        nums[i]=nums[j];
        nums[j]=temp;
    }
    public void sortColors(int[] nums) {
        
        int low=0;
        int mid=0;
        int high=nums.length-1;

        while(mid<=high){

            switch(nums[mid]){
                case 0: swap(nums,low,mid);
                        low++;
                        mid++;
                        break;
                case 1: mid++;break;
                case 2: swap(nums,mid,high);
                        high--;
                        break;
            }
        }
    }
}